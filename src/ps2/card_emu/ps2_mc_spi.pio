; largely based on https://github.com/dangiu/PicoMemcard/blob/pmc%2B/release/psxSPI.pio

; INJECTION (${VARIANT})
.define PUBLIC PIN_PSX_ACK ${PIN_PSX_ACK}
.define PUBLIC PIN_PSX_SEL ${PIN_PSX_SEL}
.define PUBLIC PIN_PSX_CLK ${PIN_PSX_CLK}
.define PUBLIC PIN_PSX_CMD ${PIN_PSX_CMD}
.define PUBLIC PIN_PSX_DAT ${PIN_PSX_DAT}

; SD2PSX
;.define PUBLIC PIN_PSX_ACK 16
;.define PUBLIC PIN_PSX_SEL 17
;.define PUBLIC PIN_PSX_CLK 18
;.define PUBLIC PIN_PSX_CMD 19
;.define PUBLIC PIN_PSX_DAT 20
;.define PUBLIC PIN_PSX_SPD_SEL 10

; BitFunX (?)
;.define PUBLIC PIN_PSX_ACK 9
;.define PUBLIC PIN_PSX_SEL 7
;.define PUBLIC PIN_PSX_CLK 8
;.define PUBLIC PIN_PSX_CMD 6
;.define PUBLIC PIN_PSX_DAT 5
;.define PUBLIC PIN_PSX_SPD_SEL 25

.program cmd_reader
    wait 0 gpio PIN_PSX_SEL  ; wait for SEL
.wrap_target
    wait 0 gpio PIN_PSX_CLK  ; wait for clock to fall
    wait 1 gpio PIN_PSX_CLK  ; wait for rising clock edge
    in pins 1                ; sample 1 bit from the CMD line
.wrap

.program dat_writer
    ; wait for SEL
    wait 0 gpio PIN_PSX_SEL
.wrap_target
    ; wait for the arm core to give us a byte to send
    pull block ; Pull Byte for sending

ack:
    ; Set ACK to 0 for whole transfer to speed up bus
    set pins, 0

    set x 6 ; Send 8 Bits in total
    out pins 1
    wait 0 gpio PIN_PSX_CLK
sendbit:
    wait 1 gpio PIN_PSX_CLK
    out pins 1
    wait 0 gpio PIN_PSX_CLK
    jmp x-- sendbit ; Repeat until byte is sent
    set pins, 1 ; Set ACK to 1
    wait 1 gpio PIN_PSX_CLK
    jmp !osre ack ; If next byte already available, continue sending
.wrap ; Wait for next byte

.program clock_probe
    wait 0 gpio PIN_PSX_SEL [2] ; Make sure to set initial irq after previous one has been cleared
    irq set 7 ; Set initial Bit before first clock cycle
.wrap_target
    wait 0 gpio PIN_PSX_CLK
    wait 1 gpio PIN_PSX_CLK
    irq set 7
.wrap

% c-sdk {

static inline void cmd_reader_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = cmd_reader_program_get_default_config(offset);

    sm_config_set_in_pins(&c, PIN_PSX_CMD);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CMD, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);

    /* shift ISR to right, autopush every 8 bits */
    sm_config_set_in_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    pio_sm_init(pio, sm, offset, &c);
}

static inline void dat_writer_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = dat_writer_program_get_default_config(offset);

    sm_config_set_out_pins(&c, PIN_PSX_DAT, 1);
    sm_config_set_set_pins(&c, PIN_PSX_ACK, 1);

    /* configure ACK pin for output */
    pio_sm_set_pins_with_mask(pio, sm, 1 << PIN_PSX_ACK, 1 << PIN_PSX_ACK);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_ACK, 1, true);
    pio_gpio_init(pio, PIN_PSX_ACK);

    /* configure DAT pin for output */
    pio_sm_set_pins_with_mask(pio, sm, 1 << PIN_PSX_DAT, 1 << PIN_PSX_DAT);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_DAT, 1, true);
    pio_gpio_init(pio, PIN_PSX_DAT);

    /* SEL and CLK used as "wait" inputs only */
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);

    /* shift OSR to right, autopull every 8 bits */
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    pio_sm_init(pio, sm, offset, &c);
}


static inline void clock_probe_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = clock_probe_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);


    /* shift ISR to right, autopush every bit */
    sm_config_set_in_pins(&c, PIN_PSX_CLK);
    sm_config_set_in_shift(&c, true, true, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_jmp_pin(&c, PIN_PSX_CLK);

    pio_sm_init(pio, sm, offset, &c);
}

%}
