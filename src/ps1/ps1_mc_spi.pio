; largely based on https://github.com/dangiu/PicoMemcard/blob/pmc%2B/release/psxSPI.pio

; INJECTION
.define PUBLIC PIN_PSX_ACK ${PIN_PSX_ACK}
.define PUBLIC PIN_PSX_SEL ${PIN_PSX_SEL}
.define PUBLIC PIN_PSX_CLK ${PIN_PSX_CLK}
.define PUBLIC PIN_PSX_CMD ${PIN_PSX_CMD}
.define PUBLIC PIN_PSX_DAT ${PIN_PSX_DAT}

; SD2PSX
;.define PUBLIC PIN_PSX_ACK 16
;.define PUBLIC PIN_PSX_SEL 17
;.define PUBLIC PIN_PSX_CLK 18
;.define PUBLIC PIN_PSX_CMD 19
;.define PUBLIC PIN_PSX_DAT 20

; BitFunX (?)
;.define PUBLIC PIN_PSX_ACK 9
;.define PUBLIC PIN_PSX_SEL 7
;.define PUBLIC PIN_PSX_CLK 8
;.define PUBLIC PIN_PSX_CMD 6
;.define PUBLIC PIN_PSX_DAT 5

.program cmd_reader
    wait 0 gpio PIN_PSX_SEL  ; wait for SEL
.wrap_target
    wait 0 gpio PIN_PSX_CLK  ; wait for clock to fall
    wait 1 gpio PIN_PSX_CLK  ; wait for rising clock edge
    in pins 1                ; sample 1 bit from the CMD line
.wrap

.program dat_writer
.side_set 1 opt pindirs
    set pindirs, 0           ; release DAT line (set pin as input = Hi-Z)
    wait 0 gpio PIN_PSX_SEL  ; wait for SEL
.wrap_target
    pull block               ; pull a byte to send, blocking

    ; trigger ACK
     nop side 1 [7]
     nop [7]
     nop [7]
     nop [7]
;     nop side 0
;    set x, 25  side 1
;ack:
;    nop [7]
;    nop [7]
;    nop [5]
;    jmp x-- ack

    set x, 7 side 0
sendbit:
    wait 1 gpio PIN_PSX_CLK  ; wait for clock to rise
    wait 0 gpio PIN_PSX_CLK  ; wait for falling clock edge
    out pindirs 1            ; output 1 bit (by changing pin direction)
    jmp x-- sendbit
.wrap


% c-sdk {

#define PS1_CLKDIV 25

static inline void cmd_reader_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = cmd_reader_program_get_default_config(offset);

    sm_config_set_in_pins(&c, PIN_PSX_CMD);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CMD, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);

    /* shift ISR to right, autopush every 8 bits */
    sm_config_set_in_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    sm_config_set_clkdiv_int_frac(&c, PS1_CLKDIV, 0x00);

    pio_sm_init(pio, sm, offset, &c);
}

static inline void controller_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = cmd_reader_program_get_default_config(offset);

    sm_config_set_in_pins(&c, PIN_PSX_DAT);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_DAT, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);

    /* shift ISR to right, autopush every 8 bits */
    sm_config_set_in_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    sm_config_set_clkdiv_int_frac(&c, PS1_CLKDIV, 0x00);

    pio_sm_init(pio, sm, offset, &c);
}

static inline void dat_writer_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = dat_writer_program_get_default_config(offset);

    sm_config_set_out_pins(&c, PIN_PSX_DAT, 1);
    sm_config_set_set_pins(&c, PIN_PSX_DAT, 1);
    sm_config_set_sideset_pins(&c, PIN_PSX_ACK);

    /* configure ACK pin for open drain */
    pio_sm_set_pins_with_mask(pio, sm, 0x00000000, 1 << PIN_PSX_ACK);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_ACK, 1, false);
    pio_gpio_init(pio, PIN_PSX_ACK);

    /* configure DAT pin for open drain */
    pio_sm_set_pins_with_mask(pio, sm, 0x00000000, 1 << PIN_PSX_DAT);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_DAT, 1, false);
    pio_gpio_init(pio, PIN_PSX_DAT);

    /* SEL and CLK used as "wait" inputs only */
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_SEL, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_PSX_CLK, 1, false);

    /* shift OSR to right, autopull every 8 bits */
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    sm_config_set_clkdiv_int_frac(&c, PS1_CLKDIV, 0x00);

    pio_sm_init(pio, sm, offset, &c);
}

%}
